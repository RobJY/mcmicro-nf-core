nextflow_workflow {

    name "Test Workflow NFCORE_MCMICRO"
    script "main.nf"
    workflow "NFCORE_MCMICRO"


    [
        test("cycle: no illumination correction") {

            when {
                params {
                    input_cycle = "/home/pollen/github/mcmicro-nf-core/assets/samplesheet_1_row_sample_cycle.csv"
                    outdir = "$outputDir"
                    marker_sheet = "/home/pollen/HITS/nextflow/test_mcmicro-nf-core/markers_1.csv"
                }
                workflow {
                    """
                    // define inputs of the workflow here. Example:
                    // input[0] = file("test-file.txt")
                    """
                }
            }

            then {
                assertAll (
                    {
                        assert snapshot (
                            path("$outputDir/ashlar/TEST1.ome.tif"),
                            path("$outputDir/deepcell/mask.tif"),
                            path("$outputDir/marker/marker_sheet.valid.csv"),
                            path("$outputDir/mcquant/TEST1_mask.csv")
                        ).match()
                    },
                    { assert workflow.success }
                )
            }

        },

        test("cycle: basicpy illumination correction") {

            when {
                params {
                    input_cycle = "/home/pollen/github/mcmicro-nf-core/assets/samplesheet_1_row_sample_cycle.csv"
                    outdir = "$outputDir"
                    marker_sheet = "/home/pollen/HITS/nextflow/test_mcmicro-nf-core/markers_1.csv"
                    illumination = "basicpy"
                }
                workflow {
                    """
                    // define inputs of the workflow here. Example:
                    // input[0] = file("test-file.txt")
                    """
                }
            }

            then {
                assertAll (
                    {
                        assert snapshot (
                            path("$outputDir/ashlar/TEST1.ome.tif"),
                            path("$outputDir/deepcell/mask.tif"),
                            path("$outputDir/marker/marker_sheet.valid.csv"),
                            path("$outputDir/mcquant/TEST1_mask.csv"),
                            path("$outputDir/basicpy/cycif-tonsil-cycle1.ome-dfp.tiff"),
                            path("$outputDir/basicpy/cycif-tonsil-cycle1.ome-ffp.tiff")
                        ).match()
                    },
                    { assert workflow.success }
                )
            }
        },

        test("cycle: manual illumination correction") {

            when {
                params {
                    input_cycle = "/home/pollen/github/mcmicro-nf-core/assets/samplesheet_1_row_sample_cycle.csv"
                    outdir = "$outputDir"
                    marker_sheet = "/home/pollen/HITS/nextflow/test_mcmicro-nf-core/markers_1.csv"
                    illumination = "manual"
                    dfp = "/home/pollen/HITS/nextflow/test_mcmicro-nf-core/correction/cycif-tonsil-dfp.ome.tif"
                    ffp = "/home/pollen/HITS/nextflow/test_mcmicro-nf-core/correction/cycif-tonsil-ffp.ome.tif"
                }
                workflow {
                    """
                    // define inputs of the workflow here. Example:
                    // input[0] = file("test-file.txt")
                    """
                }
            }

            then {
                assertAll (
                    {
                        assert snapshot (
                            path("$outputDir/ashlar/TEST1.ome.tif"),
                            path("$outputDir/deepcell/mask.tif"),
                            path("$outputDir/marker/marker_sheet.valid.csv"),
                            path("$outputDir/mcquant/TEST1_mask.csv")
                        ).match()
                    },
                    { assert workflow.success }
                )
            }
        },

        test("sample: no illumination correction") {

            when {
                params {
                    input_sample = "/home/pollen/github/mcmicro-nf-core/assets/samplesheet_1_row_sample.csv"
                    outdir = "$outputDir"
                    marker_sheet = "/home/pollen/HITS/nextflow/test_mcmicro-nf-core/markers_1.csv"
                }
                workflow {
                    """
                    // define inputs of the workflow here. Example:
                    // input[0] = file("test-file.txt")
                    """
                }
            }

            then {
                assertAll (
                    {
                        assert snapshot (
                            path("$outputDir/ashlar/TEST1.ome.tif"),
                            path("$outputDir/deepcell/mask.tif"),
                            path("$outputDir/marker/marker_sheet.valid.csv"),
                            path("$outputDir/mcquant/TEST1_mask.csv")
                        ).match()
                    },
                    { assert workflow.success }
                )
            }
        },

        test("cycle: multiple file ashlar input no correction") {

            when {
                params {
                    input_cycle = "/home/pollen/github/mcmicro-nf-core/assets/samplesheet_1_row_sample_cycle_multi.csv"
                    outdir = "$outputDir"
                    marker_sheet = "/home/pollen/github/mcmicro-nf-core/assets/markers_multi_12.csv"
                }
                workflow {
                    """
                    // define inputs of the workflow here. Example:
                    // input[0] = file("test-file.txt")
                    """
                }
            }

            then {
                assertAll (
                    {
                        assert snapshot (
                            path("$outputDir/ashlar/cycif-tonsil.ome.tif"),
                            path("$outputDir/deepcell/mask.tif"),
                            path("$outputDir/marker/marker_sheet.valid.csv"),
                            path("$outputDir/mcquant/cycif-tonsil_mask.csv")
                        ).match()
                    },
                    { assert workflow.success }
                )
            }
        }
    ]
}
