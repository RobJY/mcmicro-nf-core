nextflow_workflow {

    name "Test Workflow NFCORE_MCMICRO"
    script "main.nf"
    workflow "NFCORE_MCMICRO"

    test("Should run without failures") {

        when {
            params {
                input_cycle = "/home/pollen/github/mcmicro-nf-core/assets/samplesheet_1_row_sample_cycle.csv"
                outdir = "$outputDir"
                marker_sheet = "/home/pollen/HITS/nextflow/test_mcmicro-nf-core/markers_1.csv"
                dfp = "/home/pollen/HITS/nextflow/test_mcmicro-nf-core/correction/cycif-tonsil-ffp.ome.tif"
                ffp = "/home/pollen/HITS/nextflow/test_mcmicro-nf-core/correction/cycif-tonsil-dfp.ome.tif"
            }
            workflow {
                """
                // define inputs of the workflow here. Example:
                // input[0] = file("test-file.txt")
                """
            }
        }

        then {
            assertAll (
                { assert workflow.success },
                { assert snapshot(path("$outputDir/ashlar/TEST1.ome.tif")).match("TEST1.ome.tif") },
                { assert snapshot(path("$outputDir/deepcell/mask.tif")).match("mask.tif") },
                { assert snapshot(path("$outputDir/marker/marker_sheet.valid.csv")).match("marker_sheet.valid.csv") },
                { assert snapshot(path("$outputDir/mcquant/TEST1_mask.csv")).match("TEST1_mask.csv") },
                { assert snapshot(path("$outputDir/basicpy/cycif-tonsil-cycle1.ome-dfp.tiff")).match("cycif-tonsil-cycle1.ome-dfp.tiff") },
                { assert snapshot(path("$outputDir/basicpy/cycif-tonsil-cycle1.ome-ffp.tiff")).match("cycif-tonsil-cycle1.ome-ffp.tiff") }
            )
        }

    }

}
