nextflow_workflow {

    name "Test Workflow NFCORE_MCMICRO"
    script "workflows/mcmicro.nf"
    workflow "MCMICRO"


    [
        test("cycle: no illumination correction") {

            when {
                params {
                    segmentation = "mesmer"
                }
                workflow {
                    """
                    input[0] = Channel.of(
                        [
                            [id:"TEST1", cycle_number:1, channel_count:4],
                            "https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/imaging/ome-tiff/cycif-tonsil-cycle1.ome.tif",
                            [],
                            [],
                        ],
                    )
                    input[1] = Channel.of(
                        [
                            [1,1,'DNA_6',[],[],[]],
                            [2,1,'ELANE',[],[],[]],
                            [3,1,'CD57',[],[],[]],
                            [4,1,'CD45',[],[],[]],
                        ],
                    )
                    """
                }
            }

            then {
                assertAll (
                    {
                        assert snapshot (
                            path("$outputDir/registration/ashlar/TEST1.ome.tif"),
                            path("$outputDir/segmentation/deepcell_mesmer/mask_TEST1.tif"),
                            CsvUtils.roundAndHashCsv("$outputDir/quantification/mcquant/mesmer/TEST1_mask_TEST1.csv"),
                        ).match()
                    },
                    { assert workflow.success }
                )
            }

        },

        test("cycle: basicpy illumination correction") {

            when {
                params {
                    illumination = "basicpy"
                    segmentation = "mesmer"
                }
                workflow {
                    """
                    input[0] = Channel.of(
                        [
                            [id:"TEST1", cycle_number:1, channel_count:4],
                            "https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/imaging/ome-tiff/cycif-tonsil-cycle1.ome.tif",
                            [],
                            [],
                        ],
                    )
                    input[1] = Channel.of(
                        [
                            [1,1,'DNA_6',[],[],[]],
                            [2,1,'ELANE',[],[],[]],
                            [3,1,'CD57',[],[],[]],
                            [4,1,'CD45',[],[],[]],
                        ],
                    )
                    """
                }
            }

            then {
                assertAll (
                    {
                        assert snapshot (
                            ImageUtils.getImageMetadata("$outputDir/registration/ashlar/TEST1.ome.tif"),
                            ImageUtils.getImageMetadata("$outputDir/segmentation/deepcell_mesmer/mask_TEST1.tif"),
                            CsvUtils.summarizeCsv("$outputDir/quantification/mcquant/mesmer/TEST1_mask_TEST1.csv"),
                            ImageUtils.getImageMetadata("$outputDir/illumination_correction/basicpy/cycif-tonsil-cycle1.ome-dfp.tiff"),
                            ImageUtils.getImageMetadata("$outputDir/illumination_correction/basicpy/cycif-tonsil-cycle1.ome-ffp.tiff")
                        ).match()
                    },
                    { assert workflow.success }
                )
            }
        },

        test("cycle: manual illumination correction") {

            when {
                params {
                    illumination = "manual"
                    segmentation = "mesmer"
                }
                workflow {
                    """
                    input[0] = Channel.of(
                        [
                            [id:"TEST1", cycle_number:1, channel_count:4],
                            "https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/imaging/ome-tiff/cycif-tonsil-cycle1.ome.tif",
                            "https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/imaging/ome-tiff/cycif-tonsil-dfp.ome.tif",
                            "https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/imaging/ome-tiff/cycif-tonsil-ffp.ome.tif",
                        ],
                    )
                    input[1] = Channel.of(
                        [
                            [1,1,'DNA_6',[],[],[]],
                            [2,1,'ELANE',[],[],[]],
                            [3,1,'CD57',[],[],[]],
                            [4,1,'CD45',[],[],[]],
                        ],
                    )
                    """
                }
            }

            then {
                assertAll (
                    {
                        assert snapshot (
                            path("$outputDir/registration/ashlar/TEST1.ome.tif"),
                            path("$outputDir/segmentation/deepcell_mesmer/mask_TEST1.tif"),
                            CsvUtils.roundAndHashCsv("$outputDir/quantification/mcquant/mesmer/TEST1_mask_TEST1.csv")
                        ).match()
                    },
                    { assert workflow.success }
                )
            }
        },

        test("cycle: multiple file ashlar input no correction") {

            when {
                params {
                    segmentation = "mesmer"
                }
                workflow {
                    """
                    input[0] = Channel.of(
                        [
                            [id:"cycif-tonsil", cycle_number:1, channel_count:4],
                            "https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/imaging/ome-tiff/cycif-tonsil-cycle1.ome.tif",
                            [],
                            [],
                        ],
                        [
                            [id:"cycif-tonsil", cycle_number:2, channel_count:4],
                            "https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/imaging/ome-tiff/cycif-tonsil-cycle2.ome.tif",
                            [],
                            [],
                        ],
                        [
                            [id:"cycif-tonsil", cycle_number:3, channel_count:4],
                            "https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/imaging/ome-tiff/cycif-tonsil-cycle3.ome.tif",
                            [],
                            [],
                        ],
                    )
                    input[1] = Channel.of(
                        [
                            [1,1,'DNA_6',[],[],[]],
                            [2,1,'ELANE',[],[],[]],
                            [3,1,'CD57',[],[],[]],
                            [4,1,'CD45',[],[],[]],
                            [5,1,'DNA_7',[],[],[]],
                            [6,1,'ELANE7',[],[],[]],
                            [7,1,'CD577',[],[],[]],
                            [8,1,'CD457',[],[],[]],
                            [9,1,'DNA_8',[],[],[]],
                            [10,1,'ELANE8',[],[],[]],
                            [11,1,'CD578',[],[],[]],
                            [12,1,'CD458',[],[],[]],
                        ],
                    )
                    """
                }
            }

            then {
                assertAll (
                    {
                        assert snapshot (
                            path("$outputDir/registration/ashlar/cycif-tonsil.ome.tif"),
                            path("$outputDir/segmentation/deepcell_mesmer/mask_cycif-tonsil.tif"),
                            CsvUtils.roundAndHashCsv("$outputDir/quantification/mcquant/mesmer/cycif-tonsil_mask_cycif-tonsil.csv")
                        ).match()
                    },
                    { assert workflow.success }
                )
            }
        },

        test("cycle: multiple file ashlar input with multiple samples no correction") {

            when {
                params {
                    segmentation = "mesmer"
                }
                workflow {
                    """
                    input[0] = Channel.of(
                        [
                            [id:"cycif-tonsil", cycle_number:1, channel_count:4],
                            "https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/imaging/ome-tiff/cycif-tonsil-cycle1.ome.tif",
                            [],
                            [],
                        ],
                        [
                            [id:"cycif-tonsil", cycle_number:2, channel_count:4],
                            "https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/imaging/ome-tiff/cycif-tonsil-cycle2.ome.tif",
                            [],
                            [],
                        ],
                        [
                            [id:"cycif-tonsil2", cycle_number:1, channel_count:4],
                            "https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/imaging/ome-tiff/cycif-tonsil-cycle2.ome.tif",
                            [],
                            [],
                        ],
                        [
                            [id:"cycif-tonsil2", cycle_number:2, channel_count:4],
                            "https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/imaging/ome-tiff/cycif-tonsil-cycle3.ome.tif",
                            [],
                            [],
                        ],
                    )
                    input[1] = Channel.of(
                        [
                            [1,1,'DNA_6',[],[],[]],
                            [2,1,'ELANE',[],[],[]],
                            [3,1,'CD57',[],[],[]],
                            [4,1,'CD45',[],[],[]],
                            [5,1,'DNA_7',[],[],[]],
                            [6,1,'ELANE7',[],[],[]],
                            [7,1,'CD577',[],[],[]],
                            [8,1,'CD457',[],[],[]],
                        ],
                    )
                    """
                }
            }

            then {
                assertAll (
                    {
                        assert snapshot (
                            path("$outputDir/registration/ashlar/cycif-tonsil.ome.tif"),
                            path("$outputDir/registration/ashlar/cycif-tonsil2.ome.tif"),
                            path("$outputDir/segmentation/deepcell_mesmer/mask_cycif-tonsil.tif"),
                            path("$outputDir/segmentation/deepcell_mesmer/mask_cycif-tonsil2.tif"),
                            CsvUtils.roundAndHashCsv("$outputDir/quantification/mcquant/mesmer/cycif-tonsil_mask_cycif-tonsil.csv"),
                            CsvUtils.roundAndHashCsv("$outputDir/quantification/mcquant/mesmer/cycif-tonsil2_mask_cycif-tonsil2.csv"),
                        ).match()
                    },
                    { assert workflow.success }
                )
            }
        },

        test("cycle: multiple file ashlar input with multiple samples no correction, multiple segmentation") {

            when {
                params {
                    segmentation = "mesmer,cellpose"
                }
                workflow {
                    """
                    input[0] = Channel.of(
                        [
                            [id:"cycif-tonsil", cycle_number:1, channel_count:4],
                            "https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/imaging/ome-tiff/cycif-tonsil-cycle1.ome.tif",
                            [],
                            [],
                        ],
                        [
                            [id:"cycif-tonsil", cycle_number:2, channel_count:4],
                            "https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/imaging/ome-tiff/cycif-tonsil-cycle2.ome.tif",
                            [],
                            [],
                        ],
                        [
                            [id:"cycif-tonsil2", cycle_number:1, channel_count:4],
                            "https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/imaging/ome-tiff/cycif-tonsil-cycle2.ome.tif",
                            [],
                            [],
                        ],
                        [
                            [id:"cycif-tonsil2", cycle_number:2, channel_count:4],
                            "https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/imaging/ome-tiff/cycif-tonsil-cycle3.ome.tif",
                            [],
                            [],
                        ],
                    )
                    input[1] = Channel.of(
                        [
                            [1,1,'DNA_6',[],[],[]],
                            [2,1,'ELANE',[],[],[]],
                            [3,1,'CD57',[],[],[]],
                            [4,1,'CD45',[],[],[]],
                            [5,1,'DNA_7',[],[],[]],
                            [6,1,'ELANE7',[],[],[]],
                            [7,1,'CD577',[],[],[]],
                            [8,1,'CD457',[],[],[]],
                        ],
                    )
                    """
                }
            }

            then {
                assertAll (
                    {
                        assert snapshot (
                            path("$outputDir/registration/ashlar/cycif-tonsil.ome.tif"),
                            path("$outputDir/registration/ashlar/cycif-tonsil2.ome.tif"),
                            path("$outputDir/segmentation/deepcell_mesmer/mask_cycif-tonsil.tif"),
                            path("$outputDir/segmentation/deepcell_mesmer/mask_cycif-tonsil2.tif"),
                            path("$outputDir/segmentation/cellpose/cycif-tonsil.ome_cp_masks.tif"),
                            path("$outputDir/segmentation/cellpose/cycif-tonsil2.ome_cp_masks.tif"),
                            CsvUtils.roundAndHashCsv("$outputDir/quantification/mcquant/mesmer/cycif-tonsil_mask_cycif-tonsil.csv"),
                            CsvUtils.roundAndHashCsv("$outputDir/quantification/mcquant/mesmer/cycif-tonsil2_mask_cycif-tonsil2.csv"),
                            CsvUtils.roundAndHashCsv("$outputDir/quantification/mcquant/cellpose/cycif-tonsil_cycif-tonsil.csv"),
                            CsvUtils.roundAndHashCsv("$outputDir/quantification/mcquant/cellpose/cycif-tonsil2_cycif-tonsil2.csv"),
                        ).match()
                    },
                    { assert workflow.success }
                )
            }
        },

        test("cycle: multiple file ashlar input with basicpy correction") {

            when {
                params {
                    illumination = "basicpy"
                    segmentation = "mesmer"
                }
                workflow {
                    """
                    input[0] = Channel.of(
                        [
                            [id:"cycif-tonsil", cycle_number:1, channel_count:4],
                            "https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/imaging/ome-tiff/cycif-tonsil-cycle1.ome.tif",
                            [],
                            [],
                        ],
                        [
                            [id:"cycif-tonsil", cycle_number:2, channel_count:4],
                            "https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/imaging/ome-tiff/cycif-tonsil-cycle2.ome.tif",
                            [],
                            [],
                        ],
                        [
                            [id:"cycif-tonsil", cycle_number:3, channel_count:4],
                            "https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/imaging/ome-tiff/cycif-tonsil-cycle3.ome.tif",
                            [],
                            [],
                        ],
                    )
                    input[1] = Channel.of(
                        [
                            [1,1,'DNA_6',[],[],[]],
                            [2,1,'ELANE',[],[],[]],
                            [3,1,'CD57',[],[],[]],
                            [4,1,'CD45',[],[],[]],
                            [5,1,'DNA_7',[],[],[]],
                            [6,1,'ELANE7',[],[],[]],
                            [7,1,'CD577',[],[],[]],
                            [8,1,'CD457',[],[],[]],
                            [9,1,'DNA_8',[],[],[]],
                            [10,1,'ELANE8',[],[],[]],
                            [11,1,'CD578',[],[],[]],
                            [12,1,'CD458',[],[],[]],
                        ],
                    )
                    """
                }
            }

            then {
                assertAll (
                    {
                        assert snapshot (
                            ImageUtils.getImageMetadata("$outputDir/registration/ashlar/cycif-tonsil.ome.tif"),
                            ImageUtils.getImageMetadata("$outputDir/segmentation/deepcell_mesmer/mask_cycif-tonsil.tif"),
                            CsvUtils.summarizeCsv("$outputDir/quantification/mcquant/mesmer/cycif-tonsil_mask_cycif-tonsil.csv"),
                            ImageUtils.getImageMetadata("$outputDir/illumination_correction/basicpy/cycif-tonsil-cycle1.ome-dfp.tiff"),
                            ImageUtils.getImageMetadata("$outputDir/illumination_correction/basicpy/cycif-tonsil-cycle1.ome-ffp.tiff"),
                            ImageUtils.getImageMetadata("$outputDir/illumination_correction/basicpy/cycif-tonsil-cycle2.ome-dfp.tiff"),
                            ImageUtils.getImageMetadata("$outputDir/illumination_correction/basicpy/cycif-tonsil-cycle2.ome-ffp.tiff"),
                            ImageUtils.getImageMetadata("$outputDir/illumination_correction/basicpy/cycif-tonsil-cycle3.ome-dfp.tiff"),
                            ImageUtils.getImageMetadata("$outputDir/illumination_correction/basicpy/cycif-tonsil-cycle3.ome-ffp.tiff")
                        ).match()
                    },
                    { assert workflow.success }
                )
            }
        },

        test("cycle: multiple file ashlar input with multiple samples and basicpy correction") {

            when {
                params {
                    illumination = "basicpy"
                    segmentation = "mesmer"
                }
                workflow {
                    """
                    input[0] = Channel.of(
                        [
                            [id:"cycif-tonsil", cycle_number:1, channel_count:4],
                            "https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/imaging/ome-tiff/cycif-tonsil-cycle1.ome.tif",
                            [],
                            [],
                        ],
                        [
                            [id:"cycif-tonsil", cycle_number:2, channel_count:4],
                            "https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/imaging/ome-tiff/cycif-tonsil-cycle2.ome.tif",
                            [],
                            [],
                        ],
                        [
                            [id:"cycif-tonsil2", cycle_number:1, channel_count:4],
                            "https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/imaging/ome-tiff/cycif-tonsil-cycle2.ome.tif",
                            [],
                            [],
                        ],
                        [
                            [id:"cycif-tonsil2", cycle_number:2, channel_count:4],
                            "https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/imaging/ome-tiff/cycif-tonsil-cycle3.ome.tif",
                            [],
                            [],
                        ],
                    )
                    input[1] = Channel.of(
                        [
                            [1,1,'DNA_6',[],[],[]],
                            [2,1,'ELANE',[],[],[]],
                            [3,1,'CD57',[],[],[]],
                            [4,1,'CD45',[],[],[]],
                            [5,1,'DNA_7',[],[],[]],
                            [6,1,'ELANE7',[],[],[]],
                            [7,1,'CD577',[],[],[]],
                            [8,1,'CD457',[],[],[]],
                        ],
                    )
                    """
                }
            }

            then {
                assertAll (
                    {
                        assert snapshot (
                            ImageUtils.getImageMetadata("$outputDir/registration/ashlar/cycif-tonsil.ome.tif"),
                            ImageUtils.getImageMetadata("$outputDir/registration/ashlar/cycif-tonsil2.ome.tif"),
                            ImageUtils.getImageMetadata("$outputDir/segmentation/deepcell_mesmer/mask_cycif-tonsil.tif"),
                            path("$outputDir/segmentation/deepcell_mesmer/mask_cycif-tonsil2.tif"),
                            CsvUtils.summarizeCsv("$outputDir/quantification/mcquant/mesmer/cycif-tonsil_mask_cycif-tonsil.csv"),
                            CsvUtils.summarizeCsv("$outputDir/quantification/mcquant/mesmer/cycif-tonsil2_mask_cycif-tonsil2.csv"),
                            ImageUtils.getImageMetadata("$outputDir/illumination_correction/basicpy/cycif-tonsil-cycle1.ome-dfp.tiff"),
                            ImageUtils.getImageMetadata("$outputDir/illumination_correction/basicpy/cycif-tonsil-cycle1.ome-ffp.tiff"),
                            ImageUtils.getImageMetadata("$outputDir/illumination_correction/basicpy/cycif-tonsil-cycle2.ome-dfp.tiff"),
                            ImageUtils.getImageMetadata("$outputDir/illumination_correction/basicpy/cycif-tonsil-cycle2.ome-ffp.tiff"),
                            ImageUtils.getImageMetadata("$outputDir/illumination_correction/basicpy/cycif-tonsil-cycle3.ome-dfp.tiff"),
                            ImageUtils.getImageMetadata("$outputDir/illumination_correction/basicpy/cycif-tonsil-cycle3.ome-ffp.tiff")
                        ).match()
                    },
                    { assert workflow.success }
                )
            }
        },

        test("cycle: no illumination correction, cellpose segmentation") {

            when {
                params {
                    segmentation = "cellpose"
                }
                workflow {
                    """
                    input[0] = Channel.of(
                        [
                            [id:"TEST1", cycle_number:1, channel_count:4],
                            "https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/imaging/ome-tiff/cycif-tonsil-cycle1.ome.tif",
                            [],
                            [],
                        ],
                    )
                    input[1] = Channel.of(
                        [
                            [1,1,'DNA_6',[],[],[]],
                            [2,1,'ELANE',[],[],[]],
                            [3,1,'CD57',[],[],[]],
                            [4,1,'CD45',[],[],[]],
                        ],
                    )
                    """
                }
            }

            then {
                assertAll (
                    {
                        assert snapshot (
                            path("$outputDir/registration/ashlar/TEST1.ome.tif"),
                            path("$outputDir/segmentation/cellpose/TEST1.ome_cp_masks.tif"),
                            CsvUtils.roundAndHashCsv("$outputDir/quantification/mcquant/cellpose/TEST1_TEST1.csv"),
                        ).match()
                    },
                    { assert workflow.success }
                )
            }

        },

        test("cycle: no illumination correction, coreograph") {

            when {
                params {
                    segmentation = "mesmer"
                    tma_dearray = true

                }
                workflow {
                    """
                    input[0] = Channel.of(
                        [
                            [id:"TEST1", cycle_number:1, channel_count:4],
                            "/home/pollen/github/mcmicro-nf-core/assets/coreograph_test.tif",
                            [],
                            [],
                        ],
                    )
                    input[1] = Channel.of(
                        [
                            [1,1,'DNA_6',[],[],[]],
                        ],
                    )
                    """
                }
            }

            then {
                assertAll (
                    {
                        assert snapshot (
                            path("$outputDir/registration/ashlar/TEST1.ome.tif"),
                            path("$outputDir/segmentation/deepcell_mesmer/mask_TEST1_1.tif"),
                            path("$outputDir/segmentation/deepcell_mesmer/mask_TEST1_2.tif"),
                            path("$outputDir/segmentation/deepcell_mesmer/mask_TEST1_3.tif"),
                            path("$outputDir/segmentation/deepcell_mesmer/mask_TEST1_4.tif"),
                            path("$outputDir/segmentation/deepcell_mesmer/mask_TEST1_5.tif"),
                            path("$outputDir/segmentation/deepcell_mesmer/mask_TEST1_6.tif"),
                            path("$outputDir/segmentation/deepcell_mesmer/mask_TEST1_7.tif"),
                            path("$outputDir/segmentation/deepcell_mesmer/mask_TEST1_8.tif"),
                            path("$outputDir/segmentation/deepcell_mesmer/mask_TEST1_9.tif"),
                            path("$outputDir/segmentation/deepcell_mesmer/mask_TEST1_10.tif"),
                            path("$outputDir/segmentation/deepcell_mesmer/mask_TEST1_11.tif"),
                            path("$outputDir/segmentation/deepcell_mesmer/mask_TEST1_12.tif"),
                            path("$outputDir/segmentation/deepcell_mesmer/mask_TEST1_13.tif"),
                            path("$outputDir/segmentation/deepcell_mesmer/mask_TEST1_14.tif"),
                            path("$outputDir/segmentation/deepcell_mesmer/mask_TEST1_15.tif"),
                            path("$outputDir/segmentation/deepcell_mesmer/mask_TEST1_16.tif"),
                            path("$outputDir/segmentation/deepcell_mesmer/mask_TEST1_17.tif"),
                            path("$outputDir/segmentation/deepcell_mesmer/mask_TEST1_18.tif"),
                            path("$outputDir/segmentation/deepcell_mesmer/mask_TEST1_19.tif"),
                            path("$outputDir/segmentation/deepcell_mesmer/mask_TEST1_20.tif"),
                            path("$outputDir/segmentation/deepcell_mesmer/mask_TEST1_21.tif"),
                            path("$outputDir/segmentation/deepcell_mesmer/mask_TEST1_22.tif"),
                            path("$outputDir/segmentation/deepcell_mesmer/mask_TEST1_23.tif"),
                            path("$outputDir/segmentation/deepcell_mesmer/mask_TEST1_24.tif"),
                            path("$outputDir/segmentation/deepcell_mesmer/mask_TEST1_25.tif"),
                            path("$outputDir/segmentation/deepcell_mesmer/mask_TEST1_26.tif"),
                            path("$outputDir/segmentation/deepcell_mesmer/mask_TEST1_27.tif"),
                            path("$outputDir/segmentation/deepcell_mesmer/mask_TEST1_28.tif"),
                            path("$outputDir/segmentation/deepcell_mesmer/mask_TEST1_29.tif"),
                            path("$outputDir/segmentation/deepcell_mesmer/mask_TEST1_30.tif"),
                            path("$outputDir/segmentation/deepcell_mesmer/mask_TEST1_31.tif"),
                            path("$outputDir/segmentation/deepcell_mesmer/mask_TEST1_32.tif"),
                            path("$outputDir/segmentation/deepcell_mesmer/mask_TEST1_33.tif"),
                            path("$outputDir/segmentation/deepcell_mesmer/mask_TEST1_34.tif"),
                            path("$outputDir/segmentation/deepcell_mesmer/mask_TEST1_35.tif"),
                            path("$outputDir/segmentation/deepcell_mesmer/mask_TEST1_36.tif"),
                            path("$outputDir/segmentation/deepcell_mesmer/mask_TEST1_37.tif"),
                            path("$outputDir/segmentation/deepcell_mesmer/mask_TEST1_38.tif"),
                            path("$outputDir/segmentation/deepcell_mesmer/mask_TEST1_39.tif"),
                            path("$outputDir/segmentation/deepcell_mesmer/mask_TEST1_40.tif"),
                            path("$outputDir/segmentation/deepcell_mesmer/mask_TEST1_41.tif"),
                            path("$outputDir/segmentation/deepcell_mesmer/mask_TEST1_42.tif"),
                            path("$outputDir/segmentation/deepcell_mesmer/mask_TEST1_43.tif"),
                            path("$outputDir/segmentation/deepcell_mesmer/mask_TEST1_44.tif"),
                            path("$outputDir/segmentation/deepcell_mesmer/mask_TEST1_45.tif"),
                            path("$outputDir/segmentation/deepcell_mesmer/mask_TEST1_46.tif"),
                            path("$outputDir/segmentation/deepcell_mesmer/mask_TEST1_47.tif"),
                            CsvUtils.roundAndHashCsv("$outputDir/quantification/mcquant/mesmer/1_mask_TEST1_1.csv"),
                            CsvUtils.roundAndHashCsv("$outputDir/quantification/mcquant/mesmer/2_mask_TEST1_2.csv"),
                            CsvUtils.roundAndHashCsv("$outputDir/quantification/mcquant/mesmer/3_mask_TEST1_3.csv"),
                            CsvUtils.roundAndHashCsv("$outputDir/quantification/mcquant/mesmer/4_mask_TEST1_4.csv"),
                            CsvUtils.roundAndHashCsv("$outputDir/quantification/mcquant/mesmer/5_mask_TEST1_5.csv"),
                            CsvUtils.roundAndHashCsv("$outputDir/quantification/mcquant/mesmer/6_mask_TEST1_6.csv"),
                            CsvUtils.roundAndHashCsv("$outputDir/quantification/mcquant/mesmer/7_mask_TEST1_7.csv"),
                            CsvUtils.roundAndHashCsv("$outputDir/quantification/mcquant/mesmer/8_mask_TEST1_8.csv"),
                            CsvUtils.roundAndHashCsv("$outputDir/quantification/mcquant/mesmer/9_mask_TEST1_9.csv"),
                            CsvUtils.roundAndHashCsv("$outputDir/quantification/mcquant/mesmer/10_mask_TEST1_10.csv"),
                            CsvUtils.roundAndHashCsv("$outputDir/quantification/mcquant/mesmer/11_mask_TEST1_11.csv"),
                            CsvUtils.roundAndHashCsv("$outputDir/quantification/mcquant/mesmer/12_mask_TEST1_12.csv"),
                            CsvUtils.roundAndHashCsv("$outputDir/quantification/mcquant/mesmer/13_mask_TEST1_13.csv"),
                            CsvUtils.roundAndHashCsv("$outputDir/quantification/mcquant/mesmer/14_mask_TEST1_14.csv"),
                            CsvUtils.roundAndHashCsv("$outputDir/quantification/mcquant/mesmer/15_mask_TEST1_15.csv"),
                            CsvUtils.roundAndHashCsv("$outputDir/quantification/mcquant/mesmer/16_mask_TEST1_16.csv"),
                            CsvUtils.roundAndHashCsv("$outputDir/quantification/mcquant/mesmer/17_mask_TEST1_17.csv"),
                            CsvUtils.roundAndHashCsv("$outputDir/quantification/mcquant/mesmer/18_mask_TEST1_18.csv"),
                            CsvUtils.roundAndHashCsv("$outputDir/quantification/mcquant/mesmer/19_mask_TEST1_19.csv"),
                            CsvUtils.roundAndHashCsv("$outputDir/quantification/mcquant/mesmer/20_mask_TEST1_20.csv"),
                            CsvUtils.roundAndHashCsv("$outputDir/quantification/mcquant/mesmer/21_mask_TEST1_21.csv"),
                            CsvUtils.roundAndHashCsv("$outputDir/quantification/mcquant/mesmer/22_mask_TEST1_22.csv"),
                            CsvUtils.roundAndHashCsv("$outputDir/quantification/mcquant/mesmer/23_mask_TEST1_23.csv"),
                            CsvUtils.roundAndHashCsv("$outputDir/quantification/mcquant/mesmer/24_mask_TEST1_24.csv"),
                            CsvUtils.roundAndHashCsv("$outputDir/quantification/mcquant/mesmer/25_mask_TEST1_25.csv"),
                            CsvUtils.roundAndHashCsv("$outputDir/quantification/mcquant/mesmer/26_mask_TEST1_26.csv"),
                            CsvUtils.roundAndHashCsv("$outputDir/quantification/mcquant/mesmer/27_mask_TEST1_27.csv"),
                            CsvUtils.roundAndHashCsv("$outputDir/quantification/mcquant/mesmer/28_mask_TEST1_28.csv"),
                            CsvUtils.roundAndHashCsv("$outputDir/quantification/mcquant/mesmer/29_mask_TEST1_29.csv"),
                            CsvUtils.roundAndHashCsv("$outputDir/quantification/mcquant/mesmer/30_mask_TEST1_30.csv"),
                            CsvUtils.roundAndHashCsv("$outputDir/quantification/mcquant/mesmer/31_mask_TEST1_31.csv"),
                            CsvUtils.roundAndHashCsv("$outputDir/quantification/mcquant/mesmer/32_mask_TEST1_32.csv"),
                            CsvUtils.roundAndHashCsv("$outputDir/quantification/mcquant/mesmer/33_mask_TEST1_33.csv"),
                            CsvUtils.roundAndHashCsv("$outputDir/quantification/mcquant/mesmer/34_mask_TEST1_34.csv"),
                            CsvUtils.roundAndHashCsv("$outputDir/quantification/mcquant/mesmer/35_mask_TEST1_35.csv"),
                            CsvUtils.roundAndHashCsv("$outputDir/quantification/mcquant/mesmer/36_mask_TEST1_36.csv"),
                            CsvUtils.roundAndHashCsv("$outputDir/quantification/mcquant/mesmer/37_mask_TEST1_37.csv"),
                            CsvUtils.roundAndHashCsv("$outputDir/quantification/mcquant/mesmer/38_mask_TEST1_38.csv"),
                            CsvUtils.roundAndHashCsv("$outputDir/quantification/mcquant/mesmer/39_mask_TEST1_39.csv"),
                            CsvUtils.roundAndHashCsv("$outputDir/quantification/mcquant/mesmer/40_mask_TEST1_40.csv"),
                            CsvUtils.roundAndHashCsv("$outputDir/quantification/mcquant/mesmer/41_mask_TEST1_41.csv"),
                            CsvUtils.roundAndHashCsv("$outputDir/quantification/mcquant/mesmer/42_mask_TEST1_42.csv"),
                            CsvUtils.roundAndHashCsv("$outputDir/quantification/mcquant/mesmer/43_mask_TEST1_43.csv"),
                            CsvUtils.roundAndHashCsv("$outputDir/quantification/mcquant/mesmer/44_mask_TEST1_44.csv"),
                            CsvUtils.roundAndHashCsv("$outputDir/quantification/mcquant/mesmer/45_mask_TEST1_45.csv"),
                            CsvUtils.roundAndHashCsv("$outputDir/quantification/mcquant/mesmer/46_mask_TEST1_46.csv"),
                            CsvUtils.roundAndHashCsv("$outputDir/quantification/mcquant/mesmer/47_mask_TEST1_47.csv"),
                        ).match()
                    },
                    { assert workflow.success }
                )
            }
        },

    ]
}
